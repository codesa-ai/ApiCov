name: Release Action

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Required for creating releases
  packages: write  # Required for publishing packages

jobs:
  build:
    runs-on: ubuntu-22.04  # Always build on Ubuntu 22.04 for maximum compatibility

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Create virtual environment
        run: |
          uv venv .venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          pip install -e .
          pip install beautifulsoup4 lxml

      - name: Confirm dependencies were installed
        run: |
          pip show beautifulsoup4
          pip show lxml

      - name: Build binary
        id: build
        run: |
          source .venv/bin/activate
          echo "✅ Checking current directory and files"
          pwd
          ls -R
      
          echo "✅ Cleaning previous builds"
          rm -rf build/ dist/ __pycache__ .cache/pyinstaller
      
          echo "✅ Running PyInstaller"          
          pyinstaller --onefile \
            --clean \
            --strip \
            --noconfirm \
            --add-binary "/usr/lib/x86_64-linux-gnu/libm.so.6:." \
            --hidden-import=modules \
            --hidden-import=requests \
            --hidden-import=bs4 \
            --hidden-import=bs4.builder._lxml \
            --hidden-import=lxml \
            --hidden-import=lxml.etree \
            --collect-submodules bs4 \
            --collect-submodules lxml \
            --collect-data bs4 \
            --collect-data lxml \             
            --add-data "src/modules:modules" \
            src/apicov.py            
          # Ensure binary is executable
          chmod +x dist/apicov
          # Save binary location
          echo "binary_path=$(pwd)/dist/apicov" >> $GITHUB_OUTPUT
          echo "script_path=$(pwd)/dist/run.sh" >> $GITHUB_OUTPUT

      - name: Create run script
        run: |
          echo '#!/bin/bash' > dist/run.sh
          echo '' >> dist/run.sh
          echo '# Get the directory of the current script' >> dist/run.sh
          echo 'SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"' >> dist/run.sh
          echo '' >> dist/run.sh
          echo 'echo "Debug: Script directory: $SCRIPT_DIR"' >> dist/run.sh
          echo 'echo "Debug: Argument 1 (root_path): $1"' >> dist/run.sh
          echo 'echo "Debug: Argument 2 (api_key): $2"' >> dist/run.sh
          echo 'echo "Debug: Argument 3 (install_path): $3"' >> dist/run.sh
          echo 'echo "Debug: Argument 4 (doxygen_path): $4"' >> dist/run.sh
          echo '' >> dist/run.sh
          echo '# Check if the apicov binary exists in the same directory' >> dist/run.sh
          echo 'if [[ -f "$SCRIPT_DIR/apicov" ]]; then' >> dist/run.sh
          echo '  echo "Debug: Found apicov binary at: $SCRIPT_DIR/apicov"' >> dist/run.sh
          echo '' >> dist/run.sh
          echo '  # Require install_dir (argument 3)' >> dist/run.sh
          echo '  if [ -z "$3" ]; then' >> dist/run.sh
          echo '    echo "Error: install_dir (argument 3) is required."' >> dist/run.sh
          echo '    echo "Usage: $0 <root_path> <api_key> <install_dir> [doxygen_path]"' >> dist/run.sh
          echo '    exit 1' >> dist/run.sh
          echo '  fi' >> dist/run.sh
          echo '' >> dist/run.sh
          echo '  if [ -n "$4" ]; then' >> dist/run.sh
          echo '    echo "Debug: Using install_dir: $3 and doxygen_path: $4"' >> dist/run.sh
          echo '    CMD="$SCRIPT_DIR/apicov \"$1\" \"$2\" --install_dir \"$3\" --doxygen_path \"$4\""' >> dist/run.sh
          echo '  else' >> dist/run.sh
          echo '    echo "Debug: Using install_dir: $3"' >> dist/run.sh
          echo '    CMD="$SCRIPT_DIR/apicov \"$1\" \"$2\" --install_dir \"$3\""' >> dist/run.sh
          echo '  fi' >> dist/run.sh
          echo '' >> dist/run.sh
          echo '  echo "Debug: Full command to be executed: $CMD"' >> dist/run.sh
          echo '  # Run the apicov binary with the provided arguments' >> dist/run.sh
          echo '  eval "$CMD"' >> dist/run.sh
          echo 'else' >> dist/run.sh
          echo '  echo "Error: apicov binary not found in $SCRIPT_DIR"' >> dist/run.sh
          echo '  exit 1' >> dist/run.sh
          echo 'fi' >> dist/run.sh
          chmod +x dist/run.sh

      - name: List build files
        run: |
          echo "Listing files in dist directory:"
          ls -la dist/

      - name: Update dist directory in repository
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing current directory contents:"
          ls -la
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Get the current tag
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Current tag: $TAG_NAME"

          # Checkout the branch that the tag points to
          BRANCH_NAME=$(git name-rev --name-only "$TAG_NAME")
          echo "Checking out branch: $BRANCH_NAME"
          git checkout "$BRANCH_NAME"
          
          # Get repository root
          REPO_ROOT=$(git rev-parse --show-toplevel)
          echo "Repository root: $REPO_ROOT"
          echo "Listing repository root contents:"
          ls -la "$REPO_ROOT"
          
          # Ensure dist directory exists
          echo "Creating dist directory in repository root"
          mkdir -p "$REPO_ROOT/dist"
          echo "Listing dist directory:"
          ls -la "$REPO_ROOT/dist" || true
          
          # Ensure files are executable
          echo "Setting executable permissions"
          chmod +x dist/apicov
          chmod +x dist/run.sh
          
          # Add files to git
          echo "Adding files to git"
          git add dist/
          echo "Committing changes"
          git commit -m "Update dist directory for $TAG_NAME [skip ci]"
          
          echo "Creating new tag"
          git tag -f $TAG_NAME
          echo "Pushing tag"
          git push origin $TAG_NAME --force
          echo "Pushing branch"
          git push origin "$BRANCH_NAME"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apicov-binary
          path: |
            dist/apicov
            dist/run.sh

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts:"
          find artifacts -type f

      - name: Prepare release files
        run: |
          # Create release directory
          mkdir -p release
          
          # Create action.yml
          cat > release/action.yml << 'EOF'
          name: 'ApiCov'
          description: 'Collect API coverage data from C/C++ projects'
          author: 'Code SA'
          branding:
            icon: 'code'
            color: 'blue'

          inputs:
            install_path:
              description: 'The directory where the build is installed'
              required: true
            root_path:
              description: 'The directory where the repo is cloned'
              required: true
            api_key:
              description: 'API key for uploading coverage data to the endpoint'
              required: true
            doxygen_path:
              description: 'Path to the Doxygen HTML files (optional, for API documentation extraction)'
              required: false

          runs:
            using: "composite"
            steps:
              - name: Detect Ubuntu version
                id: detect_ubuntu
                run: |
                  if [[ "$(lsb_release -rs)" == "22.04" ]]; then
                    echo "version=ubuntu-22.04" >> $GITHUB_OUTPUT
                  else
                    echo "version=ubuntu-24.04" >> $GITHUB_OUTPUT
                  fi
                shell: bash

              - name: Debug inputs
                run: |
                  echo "Debug: root_path = ${{ inputs.root_path }}"
                  echo "Debug: api_key = ${{ inputs.api_key != '' && '***' || 'not set' }}"
                  echo "Debug: install_path = ${{ inputs.install_path != '' && inputs.install_path || 'not set' }}"
                  echo "Debug: doxygen_path = ${{ inputs.doxygen_path != '' && inputs.doxygen_path || 'not set' }}"
                  echo "Debug: GITHUB_ACTION_PATH = $GITHUB_ACTION_PATH"
                shell: bash

              - name: Run APICov
                run: |
                  echo "Debug: Constructing command..."
                  if [ -z "${{ inputs.install_path }}" ]; then
                    echo "Error: install_path (argument 3) is required."
                    echo "Usage: run.sh <root_path> <api_key> <install_path> [doxygen_path]"
                    exit 1
                  fi
                  if [ -n "${{ inputs.doxygen_path }}" ]; then
                    CMD="${GITHUB_ACTION_PATH}/dist/run.sh \"${{ inputs.root_path }}\" \"${{ inputs.api_key }}\" \"${{ inputs.install_path }}\" \"${{ inputs.doxygen_path }}\""
                  else
                    CMD="${GITHUB_ACTION_PATH}/dist/run.sh \"${{ inputs.root_path }}\" \"${{ inputs.api_key }}\" \"${{ inputs.install_path }}\""
                  fi
                  echo "Debug: Full command: $CMD"
                  eval "$CMD"
                shell: bash

              - name: "Upload JSON files"
                uses: actions/upload-artifact@v4
                with:
                  name: api-coverage
                  path: |
                    ${{inputs.root_path}}/apis.json
                    ${{inputs.root_path}}/api_coverage.json
                  if-no-files-found: error
          EOF

          # Copy binary and script to release directory
          mkdir -p "release/dist"
          cp "artifacts/apicov-binary/apicov" "release/dist/apicov"
          cp "artifacts/apicov-binary/run.sh" "release/dist/run.sh"
          
          # Ensure files are executable
          chmod +x "release/dist/apicov"
          chmod +x "release/dist/run.sh"

      - name: List release files and save paths
        id: list_files
        run: |
          echo "Listing files in release directory:"
          find "$GITHUB_WORKSPACE/release" -type f > file_paths.txt
          cat file_paths.txt
          echo "files<<EOF" >> $GITHUB_OUTPUT
          while IFS= read -r file; do
            echo "$file" >> $GITHUB_OUTPUT
          done < file_paths.txt
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.list_files.outputs.files }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 